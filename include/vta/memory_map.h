// File: memory_map.cc
// This file contains parameters related to memory

#ifndef VTA_MEM_MAP_H__
#define VTA_MEM_MAP_H__

#include <vta/top_config.h>

namespace ilang {
namespace vta {

// Buffer size
// Micro-op on-chip buffer in bytes
#define VTA_LOG_UOP_BUFF_SIZE 15
#define VTA_UOP_BUFF_SIZE (1 << VTA_LOG_UOP_BUFF_SIZE)
// input on-chip buffer in bytes
#define VTA_LOG_INPUT_BUFF_SIZE 15
#define VTA_INPUT_BUFF_SIZE (1 << VTA_LOG_INPUT_BUFF_SIZE)
// weight on-chip buffer in bytes
#define VTA_LOG_WEIGHT_BUFF_SIZE 18
#define VTA_WEIGHT_BUFF_SIZE (1 << VTA_LOG_WEIGHT_BUFF_SIZE)
// accumulator on-chip buffer in bytes
#define VTA_LOG_ACCUM_BUFF_SIZE 17
#define VTA_ACCUM_BUFF_SIZE (1 << VTA_LOG_ACCUM_BUFF_SIZE)

// vector in bits
#define VTA_INPUT_MATRIX_BITWIDTH (VTA_INPUT_DATA_BITWIDTH * VTA_BATCH_SIZE * VTA_BLOCK_IN)
#define VTA_INPUT_ELEM_BYTE_WIDTH (VTA_INPUT_MATRIX_BITWIDTH / 8)

#define VTA_WEIGHT_MATRIX_BITWIDTH (VTA_WEIGHT_BITWIDTH * VTA_BLOCK_IN * VTA_BLOCK_OUT)
#define VTA_WEIGHT_ELEM_BYTE_WIDTH (VTA_WEIGHT_MATRIX_BITWIDTH / 8)

#define VTA_ACCUM_MATRIX_BITWIDTH (VTA_ACCUM_BITWIDTH * VTA_BATCH_SIZE * VTA_BLOCK_OUT)
#define VTA_ACCUM_ELEM_BYTE_WIDTH (VTA_ACCUM_MATRIX_BITWIDTH / 8)

// #define VTA_OUT_MATRIX_BITWIDTH (VTA_OUT_BITWIDTH * VTA_BATCH_SIZE * VTA_BLOCK_OUT)
// #define VTA_OUT_ELEM_BYTE_WIDTH (VTA_OUT_MATRIX_BITWIDTH / 8)

#define VTA_UOP_BYTE_WIDTH (VTA_UOP_BITWIDTH / 8)

// vta buffer depth
#define VTA_UOP_BUFF_DEPTH (VTA_UOP_BUFF_SIZE / VTA_UOP_BYTE_WIDTH)
#define VTA_INPUT_BUFF_DEPTH (VTA_INPUT_BUFF_SIZE / VTA_INPUT_ELEM_BYTE_WIDTH)
#define VTA_WGT_BUFF_DEPTH (VTA_WEIGHT_BUFF_SIZE / VTA_WEIGHT_ELEM_BYTE_WIDTH)
#define VTA_ACCUM_BUFF_DEPTH (VTA_ACCUM_BUFF_SIZE / VTA_ACCUM_ELEM_BYTE_WIDTH)

// ratio between matrix size and memory bus width (how many pieces of data in the matrix)
// TODO: these three ratios should be abstracted away. These are low level details
#define VTA_INP_MAT_DATA_NUM (VTA_INPUT_MATRIX_BITWIDTH / VTA_BUS_BITWIDTH)
#define VTA_WGT_MAT_DATA_NUM (VTA_WEIGHT_MATRIX_BITWIDTH / VTA_BUS_BITWIDTH)
#define VTA_ACCUM_MAT_DATA_NUM (VTA_ACCUM_MATRIX_BITWIDTH / VTA_BUS_BITWIDTH)

// ILA memory states paramenter
// set the memory addr bitwidth to 32
#define VTA_MEMORY_ADDR_BITWIDTH 32

// virtual DRAM
#define VTA_VIRTUAL_DRAM "vta_virtual_dram"
#define VTA_VIRTUAL_DRAM_ENTRY_NUM 32
#define VTA_VIRTUAL_DRAM_DATA_BITWIDTH VTA_BUS_BITWIDTH

#define VTA_INPUT_MEMORY "vta_input_memory"
#define VTA_INPUT_MEMORY_ENTRY_NUM (VTA_INPUT_BUFF_DEPTH * VTA_INP_MAT_DATA_NUM)
// #define VTA_INPUT_MEMORY_ENTRY_NUM VTA_INPUT_BUFF_SIZE
#define VTA_INPUT_MEMORY_DATA_BITWIDTH VTA_BUS_BITWIDTH

#define VTA_WEIGHT_MEMORY "vta_weight_memory"
#define VTA_WEIGHT_MEMORY_ENTRY_NUM (VTA_WGT_BUFF_DEPTH * VTA_WGT_MAT_DATA_NUM)
// #define VTA_WEIGHT_MEMORY_ENTRY_NUM VTA_WEIGHT_BUFF_SIZE
#define VTA_WEIGHT_MEMORY_DATA_BITWIDTH VTA_BUS_BITWIDTH

#define VTA_ACCUM_MEMORY "vta_accum_memory"
#define VTA_ACCUM_MEMORY_ENTRY_NUM (VTA_ACCUM_BUFF_DEPTH * VTA_ACCUM_MAT_DATA_NUM)
// #define VTA_ACCUM_MEMORY_ENTRY_NUM VTA_ACCUM_BUFF_SIZE
#define VTA_ACCUM_MEMORY_DATA_BITWIDTH VTA_BUS_BITWIDTH

}
}

#endif